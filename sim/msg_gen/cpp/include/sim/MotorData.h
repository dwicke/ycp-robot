/* Auto-generated by genmsg_cpp for file /home/cojabo/ros_workspace/sim/msg/MotorData.msg */
#ifndef SIM_MESSAGE_MOTORDATA_H
#define SIM_MESSAGE_MOTORDATA_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace sim
{
template <class ContainerAllocator>
struct MotorData_ {
  typedef MotorData_<ContainerAllocator> Type;

  MotorData_()
  : motor_left_velocity(0.0)
  , motor_left_time(0)
  , motor_right_velocity(0.0)
  , motor_right_time(0)
  {
  }

  MotorData_(const ContainerAllocator& _alloc)
  : motor_left_velocity(0.0)
  , motor_left_time(0)
  , motor_right_velocity(0.0)
  , motor_right_time(0)
  {
  }

  typedef float _motor_left_velocity_type;
  float motor_left_velocity;

  typedef uint16_t _motor_left_time_type;
  uint16_t motor_left_time;

  typedef float _motor_right_velocity_type;
  float motor_right_velocity;

  typedef uint16_t _motor_right_time_type;
  uint16_t motor_right_time;


private:
  static const char* __s_getDataType_() { return "sim/MotorData"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "2c057021fd288de5b88a00bb6f218a61"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "float32 motor_left_velocity\n\
uint16 motor_left_time\n\
float32 motor_right_velocity\n\
uint16 motor_right_time\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, motor_left_velocity);
    ros::serialization::serialize(stream, motor_left_time);
    ros::serialization::serialize(stream, motor_right_velocity);
    ros::serialization::serialize(stream, motor_right_time);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, motor_left_velocity);
    ros::serialization::deserialize(stream, motor_left_time);
    ros::serialization::deserialize(stream, motor_right_velocity);
    ros::serialization::deserialize(stream, motor_right_time);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(motor_left_velocity);
    size += ros::serialization::serializationLength(motor_left_time);
    size += ros::serialization::serializationLength(motor_right_velocity);
    size += ros::serialization::serializationLength(motor_right_time);
    return size;
  }

  typedef boost::shared_ptr< ::sim::MotorData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sim::MotorData_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MotorData
typedef  ::sim::MotorData_<std::allocator<void> > MotorData;

typedef boost::shared_ptr< ::sim::MotorData> MotorDataPtr;
typedef boost::shared_ptr< ::sim::MotorData const> MotorDataConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sim::MotorData_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sim::MotorData_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sim

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sim::MotorData_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sim::MotorData_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sim::MotorData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2c057021fd288de5b88a00bb6f218a61";
  }

  static const char* value(const  ::sim::MotorData_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2c057021fd288de5ULL;
  static const uint64_t static_value2 = 0xb88a00bb6f218a61ULL;
};

template<class ContainerAllocator>
struct DataType< ::sim::MotorData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sim/MotorData";
  }

  static const char* value(const  ::sim::MotorData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sim::MotorData_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float32 motor_left_velocity\n\
uint16 motor_left_time\n\
float32 motor_right_velocity\n\
uint16 motor_right_time\n\
";
  }

  static const char* value(const  ::sim::MotorData_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::sim::MotorData_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sim::MotorData_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.motor_left_velocity);
    stream.next(m.motor_left_time);
    stream.next(m.motor_right_velocity);
    stream.next(m.motor_right_time);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MotorData_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sim::MotorData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sim::MotorData_<ContainerAllocator> & v) 
  {
    s << indent << "motor_left_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.motor_left_velocity);
    s << indent << "motor_left_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motor_left_time);
    s << indent << "motor_right_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.motor_right_velocity);
    s << indent << "motor_right_time: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.motor_right_time);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SIM_MESSAGE_MOTORDATA_H

