"""autogenerated by genmsg_py from SensorData.msg. Do not edit."""
import roslib.message
import struct


class SensorData(roslib.message.Message):
  _md5sum = "0720f31a3880984759c88032ef6503d8"
  _type = "robot_msgs/SensorData"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 ultrasonic_frontLeft_distance
uint8 ultrasonic_frontCenter_distance
uint8 ultrasonic_frontRight_distance
uint8 ultrasonic_rearRight_distance
uint8 ultrasonic_rearCenter_distance
uint8 ultrasonic_rearLeft_distance

float32 infrared_frontLeftLeft_distance
float32 infrared_frontLeftCenter_distance
float32 infrared_frontRightCenter_distance
float32 infrared_frontRightRight_distance
float32 infrared_right_distance
float32 infrared_rear_distance
float32 infrared_left_distance

uint16 human_left_motion
uint16 human_left_presence
uint16 human_right_motion
uint16 human_right_presence

"""
  __slots__ = ['ultrasonic_frontLeft_distance','ultrasonic_frontCenter_distance','ultrasonic_frontRight_distance','ultrasonic_rearRight_distance','ultrasonic_rearCenter_distance','ultrasonic_rearLeft_distance','infrared_frontLeftLeft_distance','infrared_frontLeftCenter_distance','infrared_frontRightCenter_distance','infrared_frontRightRight_distance','infrared_right_distance','infrared_rear_distance','infrared_left_distance','human_left_motion','human_left_presence','human_right_motion','human_right_presence']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','float32','float32','float32','float32','float32','float32','float32','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       ultrasonic_frontLeft_distance,ultrasonic_frontCenter_distance,ultrasonic_frontRight_distance,ultrasonic_rearRight_distance,ultrasonic_rearCenter_distance,ultrasonic_rearLeft_distance,infrared_frontLeftLeft_distance,infrared_frontLeftCenter_distance,infrared_frontRightCenter_distance,infrared_frontRightRight_distance,infrared_right_distance,infrared_rear_distance,infrared_left_distance,human_left_motion,human_left_presence,human_right_motion,human_right_presence
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(SensorData, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ultrasonic_frontLeft_distance is None:
        self.ultrasonic_frontLeft_distance = 0
      if self.ultrasonic_frontCenter_distance is None:
        self.ultrasonic_frontCenter_distance = 0
      if self.ultrasonic_frontRight_distance is None:
        self.ultrasonic_frontRight_distance = 0
      if self.ultrasonic_rearRight_distance is None:
        self.ultrasonic_rearRight_distance = 0
      if self.ultrasonic_rearCenter_distance is None:
        self.ultrasonic_rearCenter_distance = 0
      if self.ultrasonic_rearLeft_distance is None:
        self.ultrasonic_rearLeft_distance = 0
      if self.infrared_frontLeftLeft_distance is None:
        self.infrared_frontLeftLeft_distance = 0.
      if self.infrared_frontLeftCenter_distance is None:
        self.infrared_frontLeftCenter_distance = 0.
      if self.infrared_frontRightCenter_distance is None:
        self.infrared_frontRightCenter_distance = 0.
      if self.infrared_frontRightRight_distance is None:
        self.infrared_frontRightRight_distance = 0.
      if self.infrared_right_distance is None:
        self.infrared_right_distance = 0.
      if self.infrared_rear_distance is None:
        self.infrared_rear_distance = 0.
      if self.infrared_left_distance is None:
        self.infrared_left_distance = 0.
      if self.human_left_motion is None:
        self.human_left_motion = 0
      if self.human_left_presence is None:
        self.human_left_presence = 0
      if self.human_right_motion is None:
        self.human_right_motion = 0
      if self.human_right_presence is None:
        self.human_right_presence = 0
    else:
      self.ultrasonic_frontLeft_distance = 0
      self.ultrasonic_frontCenter_distance = 0
      self.ultrasonic_frontRight_distance = 0
      self.ultrasonic_rearRight_distance = 0
      self.ultrasonic_rearCenter_distance = 0
      self.ultrasonic_rearLeft_distance = 0
      self.infrared_frontLeftLeft_distance = 0.
      self.infrared_frontLeftCenter_distance = 0.
      self.infrared_frontRightCenter_distance = 0.
      self.infrared_frontRightRight_distance = 0.
      self.infrared_right_distance = 0.
      self.infrared_rear_distance = 0.
      self.infrared_left_distance = 0.
      self.human_left_motion = 0
      self.human_left_presence = 0
      self.human_right_motion = 0
      self.human_right_presence = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_6B7f4H.pack(_x.ultrasonic_frontLeft_distance, _x.ultrasonic_frontCenter_distance, _x.ultrasonic_frontRight_distance, _x.ultrasonic_rearRight_distance, _x.ultrasonic_rearCenter_distance, _x.ultrasonic_rearLeft_distance, _x.infrared_frontLeftLeft_distance, _x.infrared_frontLeftCenter_distance, _x.infrared_frontRightCenter_distance, _x.infrared_frontRightRight_distance, _x.infrared_right_distance, _x.infrared_rear_distance, _x.infrared_left_distance, _x.human_left_motion, _x.human_left_presence, _x.human_right_motion, _x.human_right_presence))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 42
      (_x.ultrasonic_frontLeft_distance, _x.ultrasonic_frontCenter_distance, _x.ultrasonic_frontRight_distance, _x.ultrasonic_rearRight_distance, _x.ultrasonic_rearCenter_distance, _x.ultrasonic_rearLeft_distance, _x.infrared_frontLeftLeft_distance, _x.infrared_frontLeftCenter_distance, _x.infrared_frontRightCenter_distance, _x.infrared_frontRightRight_distance, _x.infrared_right_distance, _x.infrared_rear_distance, _x.infrared_left_distance, _x.human_left_motion, _x.human_left_presence, _x.human_right_motion, _x.human_right_presence,) = _struct_6B7f4H.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_6B7f4H.pack(_x.ultrasonic_frontLeft_distance, _x.ultrasonic_frontCenter_distance, _x.ultrasonic_frontRight_distance, _x.ultrasonic_rearRight_distance, _x.ultrasonic_rearCenter_distance, _x.ultrasonic_rearLeft_distance, _x.infrared_frontLeftLeft_distance, _x.infrared_frontLeftCenter_distance, _x.infrared_frontRightCenter_distance, _x.infrared_frontRightRight_distance, _x.infrared_right_distance, _x.infrared_rear_distance, _x.infrared_left_distance, _x.human_left_motion, _x.human_left_presence, _x.human_right_motion, _x.human_right_presence))
    except struct.error, se: self._check_types(se)
    except TypeError, te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 42
      (_x.ultrasonic_frontLeft_distance, _x.ultrasonic_frontCenter_distance, _x.ultrasonic_frontRight_distance, _x.ultrasonic_rearRight_distance, _x.ultrasonic_rearCenter_distance, _x.ultrasonic_rearLeft_distance, _x.infrared_frontLeftLeft_distance, _x.infrared_frontLeftCenter_distance, _x.infrared_frontRightCenter_distance, _x.infrared_frontRightRight_distance, _x.infrared_right_distance, _x.infrared_rear_distance, _x.infrared_left_distance, _x.human_left_motion, _x.human_left_presence, _x.human_right_motion, _x.human_right_presence,) = _struct_6B7f4H.unpack(str[start:end])
      return self
    except struct.error, e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_6B7f4H = struct.Struct("<6B7f4H")
