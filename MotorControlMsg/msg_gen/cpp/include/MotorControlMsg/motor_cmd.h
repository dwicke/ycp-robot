/* Auto-generated by genmsg_cpp for file /home/drew/git/ycp-robot/MotorControlMsg/msg/motor_cmd.msg */
#ifndef MOTORCONTROLMSG_MESSAGE_MOTOR_CMD_H
#define MOTORCONTROLMSG_MESSAGE_MOTOR_CMD_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace MotorControlMsg
{
template <class ContainerAllocator>
struct motor_cmd_ {
  typedef motor_cmd_<ContainerAllocator> Type;

  motor_cmd_()
  : seq(0)
  , stamp()
  , frame_id()
  , precedence(0)
  , x_velocity(0.0)
  , y_velocity(0.0)
  {
  }

  motor_cmd_(const ContainerAllocator& _alloc)
  : seq(0)
  , stamp()
  , frame_id(_alloc)
  , precedence(0)
  , x_velocity(0.0)
  , y_velocity(0.0)
  {
  }

  typedef uint32_t _seq_type;
  uint32_t seq;

  typedef ros::Time _stamp_type;
  ros::Time stamp;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  frame_id;

  typedef int32_t _precedence_type;
  int32_t precedence;

  typedef float _x_velocity_type;
  float x_velocity;

  typedef float _y_velocity_type;
  float y_velocity;


private:
  static const char* __s_getDataType_() { return "MotorControlMsg/motor_cmd"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "9dc8c565ea1d6aa726eb1232cda46018"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "#Standard metadata for higher-level flow data types\n\
#sequence ID: consecutively increasing ID\n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
int32 precedence\n\
\n\
float32 x_velocity\n\
float32 y_velocity\n\
\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, seq);
    ros::serialization::serialize(stream, stamp);
    ros::serialization::serialize(stream, frame_id);
    ros::serialization::serialize(stream, precedence);
    ros::serialization::serialize(stream, x_velocity);
    ros::serialization::serialize(stream, y_velocity);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, seq);
    ros::serialization::deserialize(stream, stamp);
    ros::serialization::deserialize(stream, frame_id);
    ros::serialization::deserialize(stream, precedence);
    ros::serialization::deserialize(stream, x_velocity);
    ros::serialization::deserialize(stream, y_velocity);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(seq);
    size += ros::serialization::serializationLength(stamp);
    size += ros::serialization::serializationLength(frame_id);
    size += ros::serialization::serializationLength(precedence);
    size += ros::serialization::serializationLength(x_velocity);
    size += ros::serialization::serializationLength(y_velocity);
    return size;
  }

  typedef boost::shared_ptr< ::MotorControlMsg::motor_cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::MotorControlMsg::motor_cmd_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct motor_cmd
typedef  ::MotorControlMsg::motor_cmd_<std::allocator<void> > motor_cmd;

typedef boost::shared_ptr< ::MotorControlMsg::motor_cmd> motor_cmdPtr;
typedef boost::shared_ptr< ::MotorControlMsg::motor_cmd const> motor_cmdConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::MotorControlMsg::motor_cmd_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::MotorControlMsg::motor_cmd_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace MotorControlMsg

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::MotorControlMsg::motor_cmd_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::MotorControlMsg::motor_cmd_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::MotorControlMsg::motor_cmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9dc8c565ea1d6aa726eb1232cda46018";
  }

  static const char* value(const  ::MotorControlMsg::motor_cmd_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9dc8c565ea1d6aa7ULL;
  static const uint64_t static_value2 = 0x26eb1232cda46018ULL;
};

template<class ContainerAllocator>
struct DataType< ::MotorControlMsg::motor_cmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "MotorControlMsg/motor_cmd";
  }

  static const char* value(const  ::MotorControlMsg::motor_cmd_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::MotorControlMsg::motor_cmd_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#Standard metadata for higher-level flow data types\n\
#sequence ID: consecutively increasing ID\n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
int32 precedence\n\
\n\
float32 x_velocity\n\
float32 y_velocity\n\
\n\
\n\
";
  }

  static const char* value(const  ::MotorControlMsg::motor_cmd_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::MotorControlMsg::motor_cmd_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.seq);
    stream.next(m.stamp);
    stream.next(m.frame_id);
    stream.next(m.precedence);
    stream.next(m.x_velocity);
    stream.next(m.y_velocity);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct motor_cmd_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::MotorControlMsg::motor_cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::MotorControlMsg::motor_cmd_<ContainerAllocator> & v) 
  {
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
    s << indent << "precedence: ";
    Printer<int32_t>::stream(s, indent + "  ", v.precedence);
    s << indent << "x_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.x_velocity);
    s << indent << "y_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.y_velocity);
  }
};


} // namespace message_operations
} // namespace ros

#endif // MOTORCONTROLMSG_MESSAGE_MOTOR_CMD_H

